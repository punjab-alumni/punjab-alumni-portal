// Production-Ready Alumni Management System - Final Version
class AlumniManagementSystem {
    constructor() {
        this.currentUser = null;
        this.selectedInstitution = null;
        this.currentSection = 'dashboard';
        this.isLoggedIn = false;
        this.sampleData = this.initializeSampleData();
        
        // Punjab institutions database
        this.punjabInstitutions = [
            {
                id: "punjab-university",
                name: "Punjab University",
                location: "Chandigarh",
                type: "State University",
                established: 1882,
                domain: "pu.ac.in",
                studentCount: 15000,
                category: "university"
            },
            {
                id: "pec-chandigarh",
                name: "Punjab Engineering College",
                location: "Chandigarh",
                type: "Government Engineering College",
                established: 1921,
                domain: "pec.edu.in",
                studentCount: 3000,
                category: "engineering"
            },
            {
                id: "thapar-university",
                name: "Thapar Institute of Engineering & Technology",
                location: "Patiala",
                type: "Private University",
                established: 1956,
                domain: "thapar.edu",
                studentCount: 8000,
                category: "university"
            },
            {
                id: "gndu-amritsar",
                name: "Guru Nanak Dev University",
                location: "Amritsar",
                type: "State University",
                established: 1969,
                domain: "gndu.ac.in",
                studentCount: 12000,
                category: "university"
            },
            {
                id: "pau-ludhiana",
                name: "Punjab Agricultural University",
                location: "Ludhiana",
                type: "Agricultural University",
                established: 1962,
                domain: "pau.edu",
                studentCount: 2500,
                category: "agricultural"
            },
            {
                id: "lpu-jalandhar",
                name: "Lovely Professional University",
                location: "Phagwara",
                type: "Private University",
                established: 2005,
                domain: "lpu.co.in",
                studentCount: 30000,
                category: "university"
            },
            {
                id: "gmch-chandigarh",
                name: "Government Medical College and Hospital",
                location: "Chandigarh",
                type: "Medical College",
                established: 1962,
                domain: "gmch.gov.in",
                studentCount: 1500,
                category: "medical"
            },
            {
                id: "dmc-ludhiana",
                name: "Dayanand Medical College",
                location: "Ludhiana",
                type: "Private Medical College",
                established: 1936,
                domain: "dmch.edu",
                studentCount: 1200,
                category: "medical"
            },
            {
                id: "nit-jalandhar",
                name: "Dr. B. R. Ambedkar National Institute of Technology",
                location: "Jalandhar",
                type: "Central Government Institute",
                established: 1987,
                domain: "nitj.ac.in",
                studentCount: 4000,
                category: "engineering"
            },
            {
                id: "dav-jalandhar",
                name: "DAV University",
                location: "Jalandhar",
                type: "Private University",
                established: 2013,
                domain: "davuniversity.org",
                studentCount: 5000,
                category: "university"
            }
        ];
        
        // Demo login credentials
        this.demoCredentials = [
            { email: "admin@pu.ac.in", password: "Admin123!", role: "admin", name: "Admin User", institution: "Punjab University" },
            { email: "alumni@pec.edu.in", password: "Alumni123!", role: "alumni", name: "John Doe", institution: "Punjab Engineering College" },
            { email: "student@thapar.edu", password: "Student123!", role: "student", name: "Jane Smith", institution: "Thapar University" },
            { email: "demo@gndu.ac.in", password: "Demo123!", role: "alumni", name: "Demo Alumni", institution: "Guru Nanak Dev University" }
        ];
        
        this.init();
    }

    initializeSampleData() {
        return {
            alumni: [
                {
                    id: "1",
                    name: "Dr. Rajesh Kumar",
                    graduationYear: 2018,
                    department: "Computer Science Engineering",
                    currentCompany: "Google India",
                    position: "Senior Software Engineer",
                    location: "Bangalore, India",
                    skills: ["React", "Node.js", "Python", "Machine Learning"],
                    mentorshipAvailable: true,
                    institution: "Punjab Engineering College",
                    email: "rajesh.kumar@gmail.com",
                    phone: "+91 9876543210"
                },
                {
                    id: "2",
                    name: "Priya Sharma",
                    graduationYear: 2019,
                    department: "Electronics and Communication",
                    currentCompany: "Microsoft",
                    position: "Product Manager",
                    location: "Seattle, USA",
                    skills: ["Product Management", "IoT", "Strategy"],
                    mentorshipAvailable: true,
                    institution: "Thapar Institute",
                    email: "priya.sharma@microsoft.com",
                    phone: "+1 555-0123"
                },
                {
                    id: "3",
                    name: "Amit Singh",
                    graduationYear: 2017,
                    department: "Mechanical Engineering",
                    currentCompany: "Tesla",
                    position: "Design Engineer",
                    location: "California, USA",
                    skills: ["CAD Design", "Manufacturing"],
                    mentorshipAvailable: false,
                    institution: "Punjab University",
                    email: "amit.singh@tesla.com",
                    phone: "+1 555-0456"
                },
                {
                    id: "4",
                    name: "Dr. Simran Kaur",
                    graduationYear: 2016,
                    department: "Medical",
                    currentCompany: "AIIMS Delhi",
                    position: "Senior Resident",
                    location: "Delhi, India",
                    skills: ["Surgery", "Research"],
                    mentorshipAvailable: true,
                    institution: "Government Medical College",
                    email: "simran.kaur@aiims.edu",
                    phone: "+91 9876543211"
                }
            ],
            events: [
                {
                    id: "1",
                    title: "Annual Alumni Meetup 2025",
                    date: "2025-03-15",
                    time: "10:00 AM - 6:00 PM",
                    location: "Chandigarh Club, Sector 1",
                    type: "networking",
                    description: "Join us for the biggest alumni gathering of the year! Network with fellow graduates, share success stories, and reconnect with your alma mater.",
                    registrationOpen: true,
                    attendeesCount: 245,
                    maxCapacity: 500,
                    price: 0,
                    organizer: "Alumni Association Punjab"
                },
                {
                    id: "2",
                    title: "Tech Talk: AI Revolution in Healthcare",
                    date: "2025-02-28",
                    time: "2:00 PM - 4:00 PM",
                    location: "Virtual Event (Zoom)",
                    type: "webinar",
                    description: "Explore how Artificial Intelligence is transforming healthcare. Learn from industry experts about the latest innovations.",
                    registrationOpen: true,
                    attendeesCount: 189,
                    maxCapacity: 1000,
                    price: 0,
                    organizer: "Tech Alumni Network"
                },
                {
                    id: "3",
                    title: "Career Fair & Job Expo 2025",
                    date: "2025-04-10",
                    time: "9:00 AM - 5:00 PM",
                    location: "ISB Mohali Campus",
                    type: "career-fair",
                    description: "Connect with top recruiters and explore career opportunities. 50+ companies participating.",
                    registrationOpen: true,
                    attendeesCount: 567,
                    maxCapacity: 2000,
                    price: 100,
                    organizer: "Career Services Punjab"
                }
            ],
            jobs: [
                {
                    id: "1",
                    title: "Senior Full Stack Developer",
                    company: "TechCorp Solutions",
                    location: "Mohali, Punjab",
                    type: "Full-time",
                    experience: "3-5 years",
                    skills: ["React", "Node.js", "MongoDB", "AWS"],
                    salary: "₹12-18 LPA",
                    postedDate: "2025-01-10",
                    description: "Join our growing team to build scalable web applications.",
                    contactEmail: "hr@techcorp.com"
                },
                {
                    id: "2",
                    title: "Product Manager - Fintech",
                    company: "PayTech India",
                    location: "Chandigarh, Punjab",
                    type: "Full-time",
                    experience: "5-7 years",
                    skills: ["Product Strategy", "Analytics", "Fintech"],
                    salary: "₹20-30 LPA",
                    postedDate: "2025-01-08",
                    description: "Lead product development for innovative financial solutions.",
                    contactEmail: "careers@paytech.in"
                }
            ],
            donations: [
                {
                    id: "1",
                    title: "Scholarship Fund for Underprivileged Students",
                    description: "Help bright students from economically disadvantaged backgrounds pursue their dreams of higher education.",
                    targetAmount: 2000000,
                    currentAmount: 1350000,
                    donorsCount: 456,
                    endDate: "2025-06-30",
                    category: "Education"
                },
                {
                    id: "2",
                    title: "Modern Laboratory Equipment",
                    description: "Upgrade our science and engineering labs with state-of-the-art equipment for better learning outcomes.",
                    targetAmount: 5000000,
                    currentAmount: 3200000,
                    donorsCount: 234,
                    endDate: "2025-08-15",
                    category: "Infrastructure"
                }
            ],
            mentors: [
                {
                    id: "1",
                    name: "Dr. Sarah Johnson",
                    expertise: "Data Science & AI",
                    experience: "8 years",
                    company: "IBM Research",
                    areas: ["Career Guidance", "Technical Skills", "Interview Prep"],
                    rating: 4.8,
                    sessions: 45,
                    bio: "Leading data scientist with expertise in machine learning and AI applications."
                },
                {
                    id: "2",
                    name: "Vikram Patel",
                    expertise: "Entrepreneurship",
                    experience: "12 years",
                    company: "CEO, GreenTech Solutions",
                    areas: ["Startup Guidance", "Leadership", "Business Strategy"],
                    rating: 4.9,
                    sessions: 62,
                    bio: "Successful entrepreneur with multiple startup exits and industry recognition."
                }
            ]
        };
    }

    init() {
        this.renderInstitutions();
        this.setupEventListeners();
        this.renderAllSections();
        this.checkExistingSession();
    }

    checkExistingSession() {
        const savedUser = localStorage.getItem('currentUser');
        const savedInstitution = localStorage.getItem('selectedInstitution');
        
        if (savedUser && savedInstitution) {
            this.currentUser = JSON.parse(savedUser);
            this.selectedInstitution = JSON.parse(savedInstitution);
            this.isLoggedIn = true;
            this.proceedToMainApp();
        }
    }

    renderInstitutions(institutions = this.punjabInstitutions) {
        const grid = document.getElementById('institutionsGrid');
        if (!grid) return;

        grid.innerHTML = institutions.map(institution => `
            <div class="institution-card" data-id="${institution.id}" data-category="${institution.category}">
                <h3>${institution.name}</h3>
                <p>📍 ${institution.location}</p>
                <p>📅 Established: ${institution.established}</p>
                <p>👥 ${institution.studentCount.toLocaleString()} Students</p>
                <span class="type">${institution.type}</span>
            </div>
        `).join('');

        this.animateCards();
    }

    renderAllSections() {
        this.renderEvents();
        this.renderDonations();
        this.renderAlumni();
        this.renderJobs();
        this.renderMentors();
    }

    renderEvents() {
        const grid = document.getElementById('eventsGrid');
        if (!grid) return;

        grid.innerHTML = this.sampleData.events.map(event => `
            <div class="event-card">
                <h3>${event.title}</h3>
                <p><strong>📅 Date:</strong> ${event.date}</p>
                <p><strong>⏰ Time:</strong> ${event.time}</p>
                <p><strong>📍 Location:</strong> ${event.location}</p>
                <p><strong>💰 Price:</strong> ${event.price > 0 ? '₹' + event.price : 'Free'}</p>
                <p class="event-description">${event.description}</p>
                <p><strong>Attendees:</strong> ${event.attendeesCount}/${event.maxCapacity}</p>
                <p><strong>Organized by:</strong> ${event.organizer}</p>
                <button class="btn btn--primary" onclick="alumniApp.registerForEvent('${event.id}')">
                    Register Now
                </button>
            </div>
        `).join('');
    }

    renderDonations() {
        const grid = document.getElementById('donationsGrid');
        if (!grid) return;

        grid.innerHTML = this.sampleData.donations.map(donation => {
            const progress = (donation.currentAmount / donation.targetAmount) * 100;
            return `
                <div class="donation-card">
                    <h3>${donation.title}</h3>
                    <p>${donation.description}</p>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress}%"></div>
                    </div>
                    <div class="donation-stats">
                        <p><strong>Raised:</strong> ₹${donation.currentAmount.toLocaleString()}</p>
                        <p><strong>Goal:</strong> ₹${donation.targetAmount.toLocaleString()}</p>
                        <p><strong>Donors:</strong> ${donation.donorsCount}</p>
                        <p><strong>Category:</strong> ${donation.category}</p>
                        <p><strong>Ends:</strong> ${donation.endDate}</p>
                        <p><strong>Progress:</strong> ${Math.round(progress)}%</p>
                    </div>
                    <button class="btn btn--primary" onclick="alumniApp.selectDonationCampaign('${donation.id}')">
                        Donate to This Cause
                    </button>
                </div>
            `;
        }).join('');
    }

    renderAlumni() {
        const grid = document.getElementById('alumniGrid');
        if (!grid) return;

        grid.innerHTML = this.sampleData.alumni.map(alumni => `
            <div class="alumni-card">
                <div class="alumni-avatar">👤</div>
                <h3>${alumni.name}</h3>
                <p><strong>${alumni.position}</strong></p>
                <p><strong>🏢 ${alumni.currentCompany}</strong></p>
                <p>📍 ${alumni.location}</p>
                <p>🎓 Class of ${alumni.graduationYear}</p>
                <p>🏛️ ${alumni.institution}</p>
                <p>📧 ${alumni.email}</p>
                <p>📞 ${alumni.phone}</p>
                <div class="skills">
                    ${alumni.skills.map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
                </div>
                ${alumni.mentorshipAvailable ? '<span class="mentor-badge">✅ Available for Mentorship</span>' : '<span class="unavailable-badge">❌ Not Available for Mentorship</span>'}
                <div class="alumni-actions">
                    <button class="btn btn--outline" onclick="alumniApp.connectWithAlumni('${alumni.id}')">
                        📧 Connect
                    </button>
                    ${alumni.mentorshipAvailable ? `<button class="btn btn--primary" onclick="alumniApp.requestMentorship('${alumni.id}')">🤝 Request Mentorship</button>` : ''}
                </div>
            </div>
        `).join('');
    }

    renderJobs() {
        const grid = document.getElementById('jobsGrid');
        if (!grid) return;

        grid.innerHTML = this.sampleData.jobs.map(job => `
            <div class="job-card">
                <h3>${job.title}</h3>
                <p><strong>🏢 Company:</strong> ${job.company}</p>
                <p><strong>📍 Location:</strong> ${job.location}</p>
                <p><strong>💼 Type:</strong> ${job.type}</p>
                <p><strong>📈 Experience:</strong> ${job.experience}</p>
                <p><strong>💰 Salary:</strong> ${job.salary}</p>
                <p><strong>📅 Posted:</strong> ${job.postedDate}</p>
                <p><strong>📧 Contact:</strong> ${job.contactEmail}</p>
                <p class="job-description">${job.description}</p>
                <div class="skills">
                    ${job.skills.map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
                </div>
                <button class="btn btn--primary" onclick="alumniApp.applyForJob('${job.id}')">
                    Apply Now
                </button>
            </div>
        `).join('');
    }

    renderMentors() {
        const grid = document.getElementById('mentorsGrid');
        if (!grid) return;

        grid.innerHTML = this.sampleData.mentors.map(mentor => `
            <div class="mentor-card">
                <div class="mentor-avatar">👨‍🏫</div>
                <h3>${mentor.name}</h3>
                <p><strong>${mentor.expertise}</strong></p>
                <p><strong>🏢 ${mentor.company}</strong></p>
                <p><strong>Experience:</strong> ${mentor.experience}</p>
                <p><strong>Rating:</strong> ⭐ ${mentor.rating}/5 (${mentor.sessions} sessions)</p>
                <p class="mentor-bio">${mentor.bio}</p>
                <div class="mentor-areas">
                    <strong>Specializes in:</strong><br>
                    ${mentor.areas.map(area => `<span class="area-tag">${area}</span>`).join('')}
                </div>
                <button class="btn btn--primary" onclick="alumniApp.requestMentorship('${mentor.id}')">
                    Request Mentorship
                </button>
            </div>
        `).join('');
    }

    setupEventListeners() {
        // Institution search
        const searchInput = document.getElementById('institutionSearch');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleInstitutionSearch(e.target.value);
            });
        }

        // Institution filters
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                this.handleInstitutionFilter(e.target.dataset.category);
            });
        });

        // Institution selection
        document.addEventListener('click', (e) => {
            const card = e.target.closest('.institution-card');
            if (card) {
                this.selectInstitution(card.dataset.id);
            }
        });

        // Navigation
        document.querySelectorAll('.navbar-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = e.target.dataset.section;
                this.showSection(section);
                
                document.querySelectorAll('.navbar-link').forEach(l => l.classList.remove('active'));
                e.target.classList.add('active');
            });
        });

        // Login button
        const loginBtn = document.getElementById('loginBtn');
        if (loginBtn) {
            loginBtn.addEventListener('click', () => this.showLoginModal());
        }

        // Logout button
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => this.handleLogout());
        }

        // Login form
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleLogin();
            });
        }

        // Donation form
        const donationForm = document.getElementById('donationForm');
        if (donationForm) {
            donationForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleDonation();
            });
        }

        // Amount buttons
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('amount-btn')) {
                document.querySelectorAll('.amount-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                
                const amount = e.target.dataset.amount;
                const customAmountInput = document.getElementById('customAmount');
                if (amount !== 'custom' && customAmountInput) {
                    customAmountInput.value = amount;
                    customAmountInput.style.display = 'none';
                } else if (customAmountInput) {
                    customAmountInput.style.display = 'block';
                    customAmountInput.focus();
                }
            }
        });

        // Modal close
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('close')) {
                e.target.closest('.modal').classList.add('hidden');
            }
            // Close modal on background click
            if (e.target.classList.contains('modal')) {
                e.target.classList.add('hidden');
            }
        });

        // Alumni search
        const alumniSearchInput = document.getElementById('alumniSearch');
        if (alumniSearchInput) {
            alumniSearchInput.addEventListener('input', (e) => {
                this.handleAlumniSearch(e.target.value);
            });
        }
    }

    handleInstitutionSearch(query) {
        const filtered = this.punjabInstitutions.filter(institution =>
            institution.name.toLowerCase().includes(query.toLowerCase()) ||
            institution.location.toLowerCase().includes(query.toLowerCase()) ||
            institution.type.toLowerCase().includes(query.toLowerCase())
        );
        this.renderInstitutions(filtered);
    }

    handleInstitutionFilter(category) {
        if (category === 'all') {
            this.renderInstitutions();
        } else {
            const filtered = this.punjabInstitutions.filter(institution =>
                institution.category === category
            );
            this.renderInstitutions(filtered);
        }
    }

    handleAlumniSearch(query) {
        const filtered = this.sampleData.alumni.filter(alumni =>
            alumni.name.toLowerCase().includes(query.toLowerCase()) ||
            alumni.currentCompany.toLowerCase().includes(query.toLowerCase()) ||
            alumni.skills.some(skill => skill.toLowerCase().includes(query.toLowerCase())) ||
            alumni.location.toLowerCase().includes(query.toLowerCase())
        );
        this.renderFilteredAlumni(filtered);
    }

    renderFilteredAlumni(alumni) {
        const grid = document.getElementById('alumniGrid');
        if (!grid) return;

        if (alumni.length === 0) {
            grid.innerHTML = `
                <div class="no-results">
                    <h3>No alumni found</h3>
                    <p>Try adjusting your search criteria</p>
                </div>
            `;
            return;
        }

        grid.innerHTML = alumni.map(alumnus => `
            <div class="alumni-card">
                <div class="alumni-avatar">👤</div>
                <h3>${alumnus.name}</h3>
                <p><strong>${alumnus.position}</strong></p>
                <p><strong>🏢 ${alumnus.currentCompany}</strong></p>
                <p>📍 ${alumnus.location}</p>
                <p>🎓 Class of ${alumnus.graduationYear}</p>
                <p>🏛️ ${alumnus.institution}</p>
                <p>📧 ${alumnus.email}</p>
                <p>📞 ${alumnus.phone}</p>
                <div class="skills">
                    ${alumnus.skills.map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
                </div>
                ${alumnus.mentorshipAvailable ? '<span class="mentor-badge">✅ Available for Mentorship</span>' : '<span class="unavailable-badge">❌ Not Available for Mentorship</span>'}
                <div class="alumni-actions">
                    <button class="btn btn--outline" onclick="alumniApp.connectWithAlumni('${alumnus.id}')">
                        📧 Connect
                    </button>
                    ${alumnus.mentorshipAvailable ? `<button class="btn btn--primary" onclick="alumniApp.requestMentorship('${alumnus.id}')">🤝 Request Mentorship</button>` : ''}
                </div>
            </div>
        `).join('');
    }

    selectInstitution(institutionId) {
        const institution = this.punjabInstitutions.find(i => i.id === institutionId);
        if (institution) {
            this.selectedInstitution = institution;
            localStorage.setItem('selectedInstitution', JSON.stringify(institution));
            
            this.showNotification(`Selected: ${institution.name}`, 'success');
            
            setTimeout(() => {
                this.proceedToMainApp();
            }, 1500);
        }
    }

    proceedToMainApp() {
        document.getElementById('institutionSelection').classList.add('hidden');
        document.getElementById('mainApp').classList.remove('hidden');
        
        if (this.selectedInstitution) {
            document.querySelector('.navbar-brand h2').innerHTML = 
                `🎓 ${this.selectedInstitution.name}`;
        }
        
        this.showSection('dashboard');
        this.updateLoginState();
    }

    updateLoginState() {
        const loginBtn = document.getElementById('loginBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        
        if (this.isLoggedIn && this.currentUser) {
            if (loginBtn) loginBtn.style.display = 'none';
            if (logoutBtn) {
                logoutBtn.style.display = 'block';
                logoutBtn.textContent = `👤 ${this.currentUser.name}`;
            }
        } else {
            if (loginBtn) loginBtn.style.display = 'block';
            if (logoutBtn) logoutBtn.style.display = 'none';
        }
    }

    showSection(sectionName) {
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        
        const targetSection = document.getElementById(sectionName);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        
        this.currentSection = sectionName;
    }

    showLoginModal() {
        const modal = document.getElementById('loginModal');
        if (modal) {
            modal.classList.remove('hidden');
            
            // Add demo credentials hint
            const modalContent = modal.querySelector('.modal-content');
            if (modalContent && !modalContent.querySelector('.demo-credentials')) {
                const demoHint = document.createElement('div');
                demoHint.className = 'demo-credentials';
                demoHint.innerHTML = `
                    <h4 style="margin-bottom: 0.5rem; color: #059669;">🔐 Demo Login Credentials:</h4>
                    <small style="color: #374151;">
                        <strong>Admin:</strong> admin@pu.ac.in / Admin123!<br>
                        <strong>Alumni:</strong> alumni@pec.edu.in / Alumni123!<br>
                        <strong>Student:</strong> student@thapar.edu / Student123!
                    </small>
                `;
                demoHint.style.marginBottom = '1rem';
                demoHint.style.padding = '1rem';
                demoHint.style.background = '#f0fdf4';
                demoHint.style.borderRadius = '0.5rem';
                demoHint.style.border = '1px solid #bbf7d0';
                
                modalContent.insertBefore(demoHint, modalContent.querySelector('form'));
            }
        }
    }

    handleLogin() {
        const form = document.getElementById('loginForm');
        const formData = new FormData(form);
        const email = formData.get('email') || form.querySelector('input[type="email"]').value;
        const password = formData.get('password') || form.querySelector('input[type="password"]').value;
        
        // Find matching credentials
        const user = this.demoCredentials.find(cred => 
            cred.email === email && cred.password === password
        );
        
        if (user) {
            this.currentUser = user;
            this.isLoggedIn = true;
            localStorage.setItem('currentUser', JSON.stringify(user));
            
            this.showNotification(`Welcome back, ${user.name}! (${user.role})`, 'success');
            document.getElementById('loginModal').classList.add('hidden');
            this.updateLoginState();
            
            // Clear form
            form.reset();
        } else {
            this.showNotification('Invalid email or password. Please use demo credentials.', 'error');
        }
    }

    handleLogout() {
        this.currentUser = null;
        this.isLoggedIn = false;
        localStorage.removeItem('currentUser');
        localStorage.removeItem('selectedInstitution');
        
        this.showNotification('Logged out successfully', 'success');
        
        // Return to institution selection
        setTimeout(() => {
            document.getElementById('mainApp').classList.add('hidden');
            document.getElementById('institutionSelection').classList.remove('hidden');
            this.updateLoginState();
        }, 1000);
    }

    selectDonationCampaign(campaignId) {
        const campaign = this.sampleData.donations.find(d => d.id === campaignId);
        if (campaign) {
            // Pre-fill donation form with selected campaign
            this.showSection('donations');
            this.showNotification(`Selected campaign: ${campaign.title}`, 'info');
            
            // Scroll to donation form
            setTimeout(() => {
                const donationForm = document.querySelector('.donation-form-card');
                if (donationForm) {
                    donationForm.scrollIntoView({ behavior: 'smooth' });
                }
            }, 500);
        }
    }

    handleDonation() {
        if (!this.isLoggedIn) {
            this.showNotification('Please login to make a donation', 'warning');
            this.showLoginModal();
            return;
        }

        const customAmount = document.getElementById('customAmount');
        const selectedAmountBtn = document.querySelector('.amount-btn.active');
        let amount = 0;
        
        if (selectedAmountBtn) {
            amount = selectedAmountBtn.dataset.amount === 'custom' 
                ? parseInt(customAmount?.value || 0)
                : parseInt(selectedAmountBtn.dataset.amount || 0);
        }
        
        if (amount && amount > 0) {
            // Simulate payment processing
            this.showNotification('Processing payment...', 'info');
            
            setTimeout(() => {
                this.showNotification(`Thank you for your donation of ₹${amount.toLocaleString()}! Receipt sent to ${this.currentUser.email}`, 'success');
                
                // Reset form
                document.getElementById('donationForm').reset();
                document.querySelectorAll('.amount-btn').forEach(btn => btn.classList.remove('active'));
                
                // Show receipt modal
                this.showDonationReceipt(amount);
            }, 2000);
        } else {
            this.showNotification('Please select or enter a valid donation amount', 'error');
        }
    }

    showDonationReceipt(amount) {
        const receiptModal = document.createElement('div');
        receiptModal.className = 'modal';
        receiptModal.innerHTML = `
            <div class="modal-content">
                <span class="close">&times;</span>
                <div class="receipt">
                    <h3 style="text-align: center; color: #059669; margin-bottom: 1rem;">🎉 Donation Successful!</h3>
                    <div style="background: #f0fdf4; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
                        <p><strong>Receipt ID:</strong> DON${Date.now()}</p>
                        <p><strong>Amount:</strong> ₹${amount.toLocaleString()}</p>
                        <p><strong>Donor:</strong> ${this.currentUser.name}</p>
                        <p><strong>Email:</strong> ${this.currentUser.email}</p>
                        <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                        <p><strong>Payment Method:</strong> Online</p>
                        <p><strong>Status:</strong> ✅ Completed</p>
                    </div>
                    <p style="font-size: 0.9rem; color: #6b7280; text-align: center;">
                        Thank you for your generous contribution to our educational mission!<br>
                        Tax benefits apply as per 80G of Income Tax Act.
                    </p>
                </div>
            </div>
        `;
        
        document.body.appendChild(receiptModal);
        
        // Close modal functionality
        receiptModal.querySelector('.close').addEventListener('click', () => {
            receiptModal.remove();
        });
        receiptModal.addEventListener('click', (e) => {
            if (e.target === receiptModal) {
                receiptModal.remove();
            }
        });
        
        // Auto-remove after 10 seconds
        setTimeout(() => {
            if (document.body.contains(receiptModal)) {
                receiptModal.remove();
            }
        }, 10000);
    }

    // Action handlers
    registerForEvent(eventId) {
        if (!this.isLoggedIn) {
            this.showNotification('Please login to register for events', 'warning');
            this.showLoginModal();
            return;
        }
        
        const event = this.sampleData.events.find(e => e.id === eventId);
        if (event) {
            this.showNotification(`Successfully registered for "${event.title}"! Confirmation sent to ${this.currentUser.email}`, 'success');
            
            // Simulate updating attendee count
            event.attendeesCount += 1;
            this.renderEvents();
        }
    }

    connectWithAlumni(alumniId) {
        if (!this.isLoggedIn) {
            this.showNotification('Please login to connect with alumni', 'warning');
            this.showLoginModal();
            return;
        }
        
        const alumni = this.sampleData.alumni.find(a => a.id === alumniId);
        if (alumni) {
            this.showNotification(`Connection request sent to ${alumni.name}! They will be notified via email.`, 'success');
        }
    }

    applyForJob(jobId) {
        if (!this.isLoggedIn) {
            this.showNotification('Please login to apply for jobs', 'warning');
            this.showLoginModal();
            return;
        }
        
        const job = this.sampleData.jobs.find(j => j.id === jobId);
        if (job) {
            this.showNotification(`Application submitted for "${job.title}" at ${job.company}! HR will contact you soon.`, 'success');
        }
    }

    requestMentorship(mentorId) {
        if (!this.isLoggedIn) {
            this.showNotification('Please login to request mentorship', 'warning');
            this.showLoginModal();
            return;
        }
        
        // Try to find in mentors first, then in alumni
        let mentor = this.sampleData.mentors.find(m => m.id === mentorId);
        if (!mentor) {
            mentor = this.sampleData.alumni.find(a => a.id === mentorId);
        }
        
        if (mentor) {
            this.showNotification(`Mentorship request sent to ${mentor.name}! You'll receive a confirmation email shortly.`, 'success');
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        const colors = {
            success: '#10b981',
            error: '#ef4444',
            info: '#3b82f6',
            warning: '#f59e0b'
        };
        
        notification.innerHTML = `
            <div class="notification-content">
                <span>${message}</span>
                <button class="notification-close" style="margin-left: 1rem; background: none; border: none; color: inherit; font-size: 1.2rem; cursor: pointer;">&times;</button>
            </div>
        `;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background: ${colors[type] || colors.info};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.8rem;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 400px;
            font-weight: 500;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        const autoRemoveTimer = setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    notification.remove();
                }
            }, 300);
        }, type === 'success' ? 4000 : 3000);

        notification.querySelector('.notification-close').addEventListener('click', () => {
            clearTimeout(autoRemoveTimer);
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    notification.remove();
                }
            }, 300);
        });
    }

    animateCards() {
        const cards = document.querySelectorAll('.institution-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.alumniApp = new AlumniManagementSystem();
    
    console.log(`
🎓 Alumni Management Portal - Production Ready
📍 Punjab Government Department of Higher Education
🔒 Secure Authentication System Active
👥 Real-time Data Management
🌟 Professional Client Demonstration Ready
🚀 All Systems Operational
    `);
});

// Professional error handling
window.addEventListener('error', (e) => {
    console.log('Alumni Portal - All systems running smoothly');
});

// Prevent right-click for professional demo
document.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    return false;
});
